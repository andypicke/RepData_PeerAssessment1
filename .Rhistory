thePhrase<-c("c","h","e","e","s","e")#"Cheese"
#thePhrase<-c("c","h","e")#"Cheese"
#thePhrase<-c("c","h","e","e","s","e","i","s","g","o","o","d")#"Cheese"
#splitPhrase=strsplit(thePhrase,'')
Nchar<-length(thePhrase)
nit<-integer(length=1000)
for (i in seq_len(1000)) {
# generate a random sample
b<-sample(letters,Nchar)
# find which characters are correct
ig<-which(thePhrase==b)
#ig<-0
n_iter<-1
while (length(ig)<Nchar){
# generate a random sample
b<-sample(letters,Nchar)
# keep the correct letters
b[ig]=thePhrase[ig]
# find which characters are correct
ig<-which(thePhrase==b)
#    b[ig]=thePhrase[ig]
#        print(b)
n_iter<-n_iter+1
}
print(n_iter)
nit[i]<-n_iter
}
median(nit)
hist(nit)
# Simulate natural selection
rm(list=ls())
thePhrase<-c("c","h","e","e","s","e")#"Cheese"
#thePhrase<-c("c","h","e")#"Cheese"
#thePhrase<-c("c","h","e","e","s","e","i","s","g","o","o","d")#"Cheese"
#splitPhrase=strsplit(thePhrase,'')
Nchar<-length(thePhrase)
nit<-integer(length=1000)
for (i in seq_len(1000)) {
# generate a random sample
b<-sample(letters,Nchar)
# find which characters are correct
ig<-which(thePhrase==b)
#ig<-0
n_iter<-1
while (length(ig)<Nchar){
# generate a random sample
b<-sample(letters,Nchar)
# keep the correct letters
b[ig]=thePhrase[ig]
# find which characters are correct
ig<-which(thePhrase==b)
#    b[ig]=thePhrase[ig]
#        print(b)
n_iter<-n_iter+1
}
print(n_iter)
nit[i]<-n_iter
}
median(nit)
hist(nit)
# Simulate natural selection
rm(list=ls())
thePhrase<-c("c","h","e","e","s","e")#"Cheese"
#thePhrase<-c("c","h","e")#"Cheese"
#thePhrase<-c("c","h","e","e","s","e","i","s","g","o","o","d")#"Cheese"
#splitPhrase=strsplit(thePhrase,'')
Nchar<-length(thePhrase)
nit<-integer(length=1000)
for (i in seq_len(1000)) {
# generate a random sample
b<-sample(letters,Nchar)
# find which characters are correct
ig<-which(thePhrase==b)
#ig<-0
n_iter<-1
while (length(ig)<Nchar){
# generate a random sample
b<-sample(letters,Nchar)
# keep the correct letters
b[ig]=thePhrase[ig]
# find which characters are correct
ig<-which(thePhrase==b)
#    b[ig]=thePhrase[ig]
#        print(b)
n_iter<-n_iter+1
}
print(n_iter)
nit[i]<-n_iter
}
median(nit)
hist(nit)
# Simulate natural selection
rm(list=ls())
thePhrase<-c("c","h","e","e","s","e")#"Cheese"
#thePhrase<-c("c","h","e")#"Cheese"
#thePhrase<-c("c","h","e","e","s","e","i","s","g","o","o","d")#"Cheese"
#splitPhrase=strsplit(thePhrase,'')
Nchar<-length(thePhrase)
nit<-integer(length=1000)
for (i in seq_len(1000)) {
# generate a random sample
b<-sample(letters,Nchar)
# find which characters are correct
ig<-which(thePhrase==b)
#ig<-0
n_iter<-1
while (length(ig)<Nchar){
# generate a random sample
b<-sample(letters,Nchar)
# keep the correct letters
b[ig]=thePhrase[ig]
# find which characters are correct
ig<-which(thePhrase==b)
#    b[ig]=thePhrase[ig]
#        print(b)
n_iter<-n_iter+1
}
print(n_iter)
nit[i]<-n_iter
}
median(nit)
hist(nit)
# Simulate natural selection
rm(list=ls())
thePhrase<-c("c","h","e","e","s","e")#"Cheese"
#thePhrase<-c("c","h","e")#"Cheese"
#thePhrase<-c("c","h","e","e","s","e","i","s","g","o","o","d")#"Cheese"
#splitPhrase=strsplit(thePhrase,'')
Nchar<-length(thePhrase)
nit<-integer(length=1000)
for (i in seq_len(1000)) {
# generate a random sample
b<-sample(letters,Nchar)
# find which characters are correct
ig<-which(thePhrase==b)
#ig<-0
n_iter<-1
while (length(ig)<Nchar){
# generate a random sample
b<-sample(letters,Nchar)
# keep the correct letters
b[ig]=thePhrase[ig]
# find which characters are correct
ig<-which(thePhrase==b)
#    b[ig]=thePhrase[ig]
#        print(b)
n_iter<-n_iter+1
}
print(n_iter)
nit[i]<-n_iter
}
median(nit)
hist(nit)
# Simulate natural selection
rm(list=ls())
thePhrase<-c("c","h","e","e","s","e")#"Cheese"
#thePhrase<-c("c","h","e")#"Cheese"
#thePhrase<-c("c","h","e","e","s","e","i","s","g","o","o","d")#"Cheese"
#splitPhrase=strsplit(thePhrase,'')
Nchar<-length(thePhrase)
nit<-integer(length=1000)
for (i in seq_len(1000)) {
# generate a random sample
b<-sample(letters,Nchar)
# find which characters are correct
ig<-which(thePhrase==b)
#ig<-0
n_iter<-1
while (length(ig)<Nchar){
# generate a random sample
b<-sample(letters,Nchar)
# keep the correct letters
b[ig]=thePhrase[ig]
# find which characters are correct
ig<-which(thePhrase==b)
#    b[ig]=thePhrase[ig]
#        print(b)
n_iter<-n_iter+1
}
print(n_iter)
nit[i]<-n_iter
}
median(nit)
hist(nit)
# Simulate natural selection
rm(list=ls())
thePhrase<-c("c","h","e","e","s","e")#"Cheese"
#thePhrase<-c("c","h","e")#"Cheese"
#thePhrase<-c("c","h","e","e","s","e","i","s","g","o","o","d")#"Cheese"
#splitPhrase=strsplit(thePhrase,'')
Nchar<-length(thePhrase)
nit<-integer(length=1000)
for (i in seq_len(1000)) {
# generate a random sample
b<-sample(letters,Nchar)
# find which characters are correct
ig<-which(thePhrase==b)
#ig<-0
n_iter<-1
while (length(ig)<Nchar){
# generate a random sample
b<-sample(letters,Nchar)
# keep the correct letters
b[ig]=thePhrase[ig]
# find which characters are correct
ig<-which(thePhrase==b)
#    b[ig]=thePhrase[ig]
#        print(b)
n_iter<-n_iter+1
}
print(n_iter)
nit[i]<-n_iter
}
median(nit)
hist(nit)
# Simulate natural selection
rm(list=ls())
thePhrase<-c("c","h","e","e","s","e")#"Cheese"
#thePhrase<-c("c","h","e")#"Cheese"
#thePhrase<-c("c","h","e","e","s","e","i","s","g","o","o","d")#"Cheese"
#splitPhrase=strsplit(thePhrase,'')
Nchar<-length(thePhrase)
nit<-integer(length=1000)
for (i in seq_len(1000)) {
# generate a random sample
b<-sample(letters,Nchar)
# find which characters are correct
ig<-which(thePhrase==b)
#ig<-0
n_iter<-1
while (length(ig)<Nchar){
# generate a random sample
b<-sample(letters,Nchar)
# keep the correct letters
b[ig]=thePhrase[ig]
# find which characters are correct
ig<-which(thePhrase==b)
#    b[ig]=thePhrase[ig]
#        print(b)
n_iter<-n_iter+1
}
print(n_iter)
nit[i]<-n_iter
}
median(nit)
hist(nit)
# Simulate natural selection
rm(list=ls())
thePhrase<-c("c","h","e","e","s","e")#"Cheese"
#thePhrase<-c("c","h","e")#"Cheese"
#thePhrase<-c("c","h","e","e","s","e","i","s","g","o","o","d")#"Cheese"
#splitPhrase=strsplit(thePhrase,'')
Nchar<-length(thePhrase)
nit<-integer(length=1000)
for (i in seq_len(1000)) {
# generate a random sample
b<-sample(letters,Nchar)
# find which characters are correct
ig<-which(thePhrase==b)
#ig<-0
n_iter<-1
while (length(ig)<Nchar){
# generate a random sample
b<-sample(letters,Nchar)
# keep the correct letters
b[ig]=thePhrase[ig]
# find which characters are correct
ig<-which(thePhrase==b)
#    b[ig]=thePhrase[ig]
#        print(b)
n_iter<-n_iter+1
}
print(n_iter)
nit[i]<-n_iter
}
median(nit)
hist(nit)
# Simulate natural selection
rm(list=ls())
thePhrase<-c("c","h","e","e","s","e")#"Cheese"
#thePhrase<-c("c","h","e")#"Cheese"
#thePhrase<-c("c","h","e","e","s","e","i","s","g","o","o","d")#"Cheese"
#splitPhrase=strsplit(thePhrase,'')
Nchar<-length(thePhrase)
nit<-integer(length=1000)
for (i in seq_len(1000)) {
# generate a random sample
b<-sample(letters,Nchar)
# find which characters are correct
ig<-which(thePhrase==b)
#ig<-0
n_iter<-1
while (length(ig)<Nchar){
# generate a random sample
b<-sample(letters,Nchar)
# keep the correct letters
b[ig]=thePhrase[ig]
# find which characters are correct
ig<-which(thePhrase==b)
#    b[ig]=thePhrase[ig]
#        print(b)
n_iter<-n_iter+1
}
print(n_iter)
nit[i]<-n_iter
}
median(nit)
hist(nit)
# Simulate natural selection
rm(list=ls())
thePhrase<-c("c","h","e","e","s","e")#"Cheese"
#thePhrase<-c("c","h","e")#"Cheese"
#thePhrase<-c("c","h","e","e","s","e","i","s","g","o","o","d")#"Cheese"
#splitPhrase=strsplit(thePhrase,'')
Nchar<-length(thePhrase)
nit<-integer(length=1000)
for (i in seq_len(1000)) {
# generate a random sample
b<-sample(letters,Nchar)
# find which characters are correct
ig<-which(thePhrase==b)
#ig<-0
n_iter<-1
while (length(ig)<Nchar){
# generate a random sample
b<-sample(letters,Nchar)
# keep the correct letters
b[ig]=thePhrase[ig]
# find which characters are correct
ig<-which(thePhrase==b)
#    b[ig]=thePhrase[ig]
#        print(b)
n_iter<-n_iter+1
}
print(n_iter)
nit[i]<-n_iter
}
median(nit)
hist(nit)
# Simulate natural selection
rm(list=ls())
thePhrase<-c("c","h","e","e","s","e")#"Cheese"
#thePhrase<-c("c","h","e")#"Cheese"
#thePhrase<-c("c","h","e","e","s","e","i","s","g","o","o","d")#"Cheese"
#splitPhrase=strsplit(thePhrase,'')
Nchar<-length(thePhrase)
nit<-integer(length=1000)
for (i in seq_len(1000)) {
# generate a random sample
b<-sample(letters,Nchar)
# find which characters are correct
ig<-which(thePhrase==b)
#ig<-0
n_iter<-1
while (length(ig)<Nchar){
# generate a random sample
b<-sample(letters,Nchar)
# keep the correct letters
b[ig]=thePhrase[ig]
# find which characters are correct
ig<-which(thePhrase==b)
#    b[ig]=thePhrase[ig]
#        print(b)
n_iter<-n_iter+1
}
print(n_iter)
nit[i]<-n_iter
}
median(nit)
hist(nit)
sessionInfo()
install.packages(c("BH", "DBI", "fields", "Hmisc", "jsonlite", "Matrix", "nlme", "nycflights13", "openssl", "rgdal", "rgeos", "survival", "testthat", "zoo"))
rm(list=ls())
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
?data
head(spam)
str(spam)
library(kernlab)
data(spam)
head(spam)
str(spam)
set.seed(3435)
trainIndicator <- rbinom(4601,size=1,prob=0.5)
table(trainIndicator)
dim(spam)
trainSpam <- spam[trainIndicator==1 , ]
testSpam <- spam[trainIndicator==0 , ]
names(trainSpam)
head(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(trainSpam$capitalAve)
boxplot(trainSpam$capitalAve)
boxplot(trainSpam$capitalAve ~ trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve)+1 ~ trainSpam$type)
plot(log10(trainSpam$capitalAve) ~ trainSpam$type)
plot(log10(trainSpam$capitalAve) +1 ~ trainSpam$type)
plot(log10(trainSpam$capitalAve +1) ~ trainSpam$type)
log10(0)
plot(log10(trainSpam[.1:4]+1))
hCluster <- hclust(dist(t(trainSpam[,1:57])))
plot(hCluster)
hCluster <- hclust(dist(t(log10(trainSpam[,1:57]+1))))
plot(hCluster)
source('~/DataSciCoursera/ReproducibleResearch/Week1.R', echo=TRUE)
trainSpam$numType <- as.numeric(trainSpam$type)-1
trainSpam$numType
sessionInfo()
Sys.time()
install.packages("xtable")
library(xtable)
xt
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(url,"ActData.zip"")
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(url,"ActData.zip")
getwd()
read.csv("activity.csv")
dat <- read.csv("activity.csv")
setwd("/Users/Andy/DataSciCoursera/ReproducibleResearch/CourseProject1/doc/")
setwd("/Users/Andy/DataSciCoursera/ReproducibleResearch/CourseProject1/")
dat <- read.csv("activity.csv")
dat
class(dat)
class(dat$date)
tapply(dat$steps, dat$interval, mean)
tapply(dat$steps, dat$interval, mean,na.rm=TRUE)
plot(dat$interval,mean_steps_interval)
mean_steps_interval <- tapply(dat$steps, dat$interval, mean,na.rm=TRUE)
plot(dat$interval,mean_steps_interval)
dim(mean_steps_interval)
dim(dat$iin)
dim(dat$interval)
dat$interval
plot(as.numeric(dat$interval),mean_steps_interval)
plot(as.numeric(dat$interval),mean_steps_interval,type="l")
mean_steps_interval <- tapply(dat$steps, dat$interval, mean,na.rm=TRUE)
mean_steps_interval
as.numeric(dat$interval)
plot(as.numeric(levels(dat$interval)),mean_steps_interval,type="l")
as.numeric(levels(dat$interval))
levels(dat$interval)
class(dat$interval)
plot(unique(dat$interval),mean_steps_interval,type="l")
dim(unique(dat$interval))
unique(dat$interval)
length(unique(dat$interval))
dim(mean_steps_interval)
24*69
24*60
which.max(mean_steps_interval)
?which.max
unique(dat$interval)[which.max(mean_steps_interval)]
is.na(dat$steps)
which[is.na(dat$steps)]
which(is.na(dat$steps))
length(which(is.na(dat#steps)))
length(which(is.na(dat$steps)))
length(which(is.na(dat$steps)))
(which(is.na(dat$steps))
which(is.na(dat$steps))
?lapply
dat$steps[which(is.na(dat$steps))]
idna <-which(is.na(dat$steps))
i<=10
i<-10
idna[i]
seq_along(idna)
dat$steps[idna[i]]
dat$steps[idna][i]
dat$steps[1]
idna[1]
for (i in seq_along(idna)){
dat$steps[idna[i]] <- mean_steps_interval[which(dat$interval[idna[i]])==unique(dat$interval)]
}
i
dat$interval[idna[i]])
dat$interval[idna[i]]
dat$steps[idna[i]] <- mean_steps_interval[which(dat$interval[idna[i]]==unique(dat$interval))]
for (i in seq_along(idna)){
dat$steps[idna[i]] <- mean_steps_interval[which(dat$interval[idna[i]]==unique(dat$interval))]
}
dat$steps
head(dat$steps)
head(dat)
rm(list=ls())
head(dat)
head(dat)
?factor
setwd("/Users/Andy/DataSciCoursera/ReproducibleResearch/CourseProject1/")
dat <- read.csv("activity.csv")
class(dat$date)
dat$date <- as.Date(dat$date)
class(dat$date)
weekdays(dat$Date)
dat$date
weekdays(dat$date)
factor(dat$date)
ff<-factor(dat$date)
ff
levels(ff)
ff<-factor(weekdays(dat$date))
ff
levels(ff)
ff<-factor(levels=c("weekday","weekend"))
ff
?as.factor
